{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qj\partightenfactor0

\f0\fs24 \cf0 Jefe - Trabajador \
\
Python utilizando las librer\'edas de Threading , Time y Random \
\
Utilic\'e9 un m\'faltiplex para impedir que a varios trabajadores se les asignara la misma p\'e1gina a buscar\
\
El refinamiento que le agregu\'e9 es que devuelva la p\'e1gina que encontr\'f3, qu\'e9 avise cuando ya acab\'f3 y  el tiempo que se tard\'f3.\
\
No esto seguro al 100 % que fuera lo que esperaba usted que entregar\'e1 . Ya que se me hicieron muy pocos los sem\'e1foros que use a comparaci\'f3n de varios ejemplos vistos de forma previa. Quiz\'e1 pude evitar conflictos que se pudieran encontrar en el futuro de vida del programa. Y sin duda no me he puesto a analizarlos todos. Quiz\'e1 con la pr\'e1ctica mejore mi capacidad de interpretar  el multi-procesamiento y el manejo de todos los errores que mencionamos en clase. Cabe resaltar que la condici\'f3n de carrera y la concurrencia se controlan en mi c\'f3digo seg\'fan yo. }